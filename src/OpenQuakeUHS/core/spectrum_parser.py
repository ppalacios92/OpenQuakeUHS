"""
UHS Spectrum Reader and Plotter
Author: Ing. Patricio Palacios Msc.
Date: June 6, 2025

Description:
------------
This module defines two classes: `UHSCurves` and `UHSSpectrum`, used to read and 
analyze Uniform Hazard Spectra (UHS) data generated by OpenQuake.

Each CSV file is expected to include:
- Row 1: headers with period-dependent keys like '0.687000~SA(0.1)' or '0.687000~PGA'
- Row 2: numerical data for longitude, latitude, and spectral accelerations

The module parses this information and allows plotting the spectral curves for 
any probability of exceedance (PoE).
"""

import pandas as pd
import matplotlib.pyplot as plt
import re
from collections import defaultdict

class UHSCurves:
    """
    Stores spectral acceleration curves for multiple probabilities of exceedance (PoEs).
    Data is organized as: {poe: {period: Sa}}.
    """
    def __init__(self):
        self.data = defaultdict(dict)

    def add_point(self, poe, period, sa):
        """
        Adds a single spectral acceleration value to the dataset.

        Parameters:
        - poe (float): Probability of exceedance (e.g., 0.687)
        - period (float): Spectral period in seconds
        - sa (float): Spectral acceleration in g
        """
        self.data[poe][period] = sa

    def T(self):
        """
        Returns the list of periods common to all PoEs.

        Returns:
        - List of float: periods [s]
        """
        all_periods = [set(periods.keys()) for periods in self.data.values()]
        common = set.intersection(*all_periods) if all_periods else set()
        return sorted(common)

    def Sa(self, poe):
        """
        Returns spectral acceleration values for a given PoE.

        Parameters:
        - poe (float): Probability of exceedance

        Returns:
        - List of float: Sa values corresponding to common periods
        """
        if poe not in self.data:
            raise ValueError(f"PoE {poe} not found in the data.")
        periods = self.T()
        return [self.data[poe][T] for T in periods]


class UHSSpectrum:
    """
    Represents a single UHS spectrum extracted from an OpenQuake CSV output file.
    """
    def __init__(self, filepath):
        """
        Initializes the object and parses the CSV file.

        Parameters:
        - filepath (str): Path to the UHS CSV file
        """
        self.filepath = filepath
        self.filename = filepath.split("/")[-1]
        self.latitude = None
        self.longitude = None
        self.mean = UHSCurves()  # Spectral data grouped by PoE
        self._read_csv()

    def _read_csv(self):
        """
        Reads the CSV file and extracts:
        - Geographic location (longitude, latitude)
        - Spectral accelerations for each PoE and period
        """
        df = pd.read_csv(self.filepath, header=None)

        header = df.iloc[1].tolist()  # 2nd row: headers
        values = df.iloc[2].tolist()  # 3rd row: numerical data

        self.longitude = float(values[0])
        self.latitude = float(values[1])

        for h, v in zip(header[2:], values[2:]):
            text = str(h)
            try:
                value = float(v)
            except ValueError:
                continue  # skip non-numeric fields (e.g., metadata at the end)

            # Match strings like '0.687~SA(0.1)' or '0.687~PGA'
            match = re.match(r"([\d.]+)~(SA|PGA)(?:\(([\d.]+)\))?", text)
            if match:
                poe = float(match.group(1))
                kind = match.group(2)
                if kind == "PGA":
                    period = 0.01  # Convention: PGA = SA(T=0.01s)
                else:
                    period = float(match.group(3))
                self.mean.add_point(poe, period, value)

    def plot(self, poe, ax=None, label=None, color=None):
        
        """
        Plots the UHS curve for a given PoE.

        Parameters:
        - poe (float): Probability of exceedance to plot
        - ax (matplotlib.axes): Optional axis to plot into
        - label (str): Optional label for the curve
        - color (str): Optional color for the curve
        """
        T = self.mean.T()
        Sa = self.mean.Sa(poe)

        if ax is None:
            fig, ax = plt.subplots()

        ax.plot(T, Sa, linewidth=2 ,  label=label or f"PoE = {poe}", color=color)
        ax.set_xlabel("Period [s]", fontweight="bold")
        ax.set_ylabel("Spectral Acceleration [g]", fontweight="bold")
        ax.set_title(f"UHS at ({self.latitude:.3f}, {self.longitude:.3f})", fontweight="bold")
        ax.grid(True)

        # Set axis limits
        ax.set_xlim(0, 5)
        ax.set_ylim(0, max(Sa) * 1.1)

        if label:
            ax.legend()

        if ax is None:
            plt.show()
